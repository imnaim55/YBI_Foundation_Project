# -*- coding: utf-8 -*-
"""MovieRecomendation_p3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zpmFI_sj6P81nnODny9Tajzr8ttPtU2p

# ***Movie Recomendation System***

**Recommender System** is a system that seeks to pedict or filter prefference according to the user's choice. Recommender systems are utilized in a variety of areas including movies, music, news, books, research articale, search queries, social tags, and products in general. Recommender systems produce a list of recommendations in any of the two ways --

**Collaborative filtering:** Collabrative filtering approaches build a mofdel from the user's past behavior(i.e. items purchased or searched by the users) as well as similar decisions made by other users. This model is then used to predict items(or rating for items) that users may have an interest in.

**Content-based filtering:** Content-based filtering approaches using a series of discrete characteristics of an item in order to recommend additional items with similar properties. Content-based filtering methods are totaly based on a description of the item and a profile of the user's preferences. It recommends item based on the user's past preferences. Let's develop a basic recommendation system using Python and Pandas.

Let's develop a basic recommendition system by suggesting items that are most similar to a particular item, in this case, movies. It just tells what movies/items are most similar to the user's movie choice.

# ***Import Library***
"""

import pandas as pd

import numpy as np

"""# ***Import Dataset***"""

df = pd.read_csv('https://raw.githubusercontent.com/YBIFoundation/Dataset/main/Movies%20Recommendation.csv')

df.head()

df.info()

df.shape

df.columns

"""# ***Get Feature Selection***"""

df_features = df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

"""Selected five existing features to recommend movies. It may vary from one project to anothe. Like one can add vote counts, budget, language etc."""

df_features.shape

df_features

x=df_features['Movie_Genre']+' '+df_features['Movie_Keywords']+' '+df_features['Movie_Tagline']+' '+df_features['Movie_Cast']+' '+df_features['Movie_Director']

x

x.shape

"""# ***Get Feature Text Conversion Tokens***"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

x=tfidf.fit_transform(x)

x.shape

print(x)

"""# ***Get Similarity Score using Cosine Similarity***

Cosine_similarity computes the l2-normalized dot product of vectors. Edclidean(L2) normalization projects the vectors onto the unit sphere, and their dot product is then the cosin of the angle between the points denoted by the vectors.
"""

from sklearn.metrics.pairwise import cosine_similarity

similarity_score = cosine_similarity(x)

similarity_score

similarity_score.shape

"""# ***Get Movie Name as Input from User and Validate for Closest Spelling***"""

favourite_movie_name = input('Enter your favourite movie name: ')

all_movies_title_list = df['Movie_Title'].tolist()

import difflib

movie_recommendation = difflib.get_close_matches(favourite_movie_name,all_movies_title_list)
print(movie_recommendation)

close_match = movie_recommendation[0]
print(close_match)

index_of_close_match_movie = df[df.Movie_Title == close_match]['Movie_ID'].values[0]
print(index_of_close_match_movie)

# getting a list of similar movies
recommendation_score = list(enumerate(similarity_score[index_of_close_match_movie]))
print(recommendation_score)

len(recommendation_score)

"""# ***Get All Movies Sort Based on Recommendation Score ert Favourite Movie***"""

# sorting the movies based on their similarity score
sorted_similar_movies = sorted(recommendation_score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

#print the name of similar movies based on the index
print('Top 30 movies suggested for you: \n')
i=1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.index==index]['Movie_Title'].values[0]
  if (i<31):
    print(i,'.',title_from_index)
    i+=1

"""# ***Top 10 Movie Recommendation System***"""

movie_name = input('Enter your favourite movie name: ')
list_of_all_titles = df['Movie_Title'].tolist()
find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
close_match = find_close_match[0]
index_of_the_movie = df[df.Movie_Title == close_match]['Movie_ID'].values[0]
recommendation_score = list(enumerate(similarity_score[index_of_the_movie]))
sorted_similar_movies = sorted(recommendation_score, key = lambda x:x[1], reverse = True)
print('Top 10 movies suggested for you: \n')
i=1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.Movie_ID==index]['Movie_Title'].values
  if (i<11):
    print(i,'.',title_from_index)
    i+=1